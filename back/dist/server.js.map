{"version":3,"sources":["../src/server.ts","../src/database/prisma-client.ts","../src/repositories/user.repository.ts","../src/usecases/user.usecase.ts","../src/routes/user.routes.ts","../src/repositories/administrador.repository.ts","../src/usecases/administrador.usecase.ts","../src/routes/administrador.routes.ts","../src/routes/jogo.routes.ts","../src/routes/conteudoeducativo.routes.ts","../src/routes/conteudoimagem.routes.ts","../src/routes/loja.routes.ts","../src/routes/medalha.routes.ts","../src/routes/medalhadisponivelnaloja.routes.ts"],"sourcesContent":["import fastify, { FastifyInstance } from \"fastify\";\r\nimport { userRoutes } from \"./routes/user.routes\";\r\nimport { administradorRoutes } from \"./routes/administrador.routes\";\r\nimport { JogoRoutes } from \"./routes/jogo.routes\";\r\nimport { ConteudoEducativoRoutes } from \"./routes/conteudoeducativo.routes\";\r\nimport { ConteudoImagemRoutes } from \"./routes/conteudoimagem.routes\";\r\nimport { LojaRoutes } from \"./routes/loja.routes\";\r\nimport { MedalhaRoutes } from \"./routes/medalha.routes\";\r\nimport { MedalhaDisponivelNaLojaRoutes } from \"./routes/medalhadisponivelnaloja.routes\";\r\nconst app: FastifyInstance = fastify({})\r\n\r\napp.register(userRoutes, {\r\n    prefix: '/users',\r\n    \r\n})\r\n\r\napp.register(administradorRoutes, {\r\n    prefix: '/administrador',\r\n    \r\n})\r\n\r\napp.register( JogoRoutes, {\r\n    prefix: '/jogo',\r\n    \r\n})\r\n\r\napp.register(ConteudoEducativoRoutes, {\r\n    prefix: '/conteudoeducativo',\r\n    \r\n})\r\n\r\napp.register(ConteudoImagemRoutes, {\r\n    prefix: '/conteudoimagem',\r\n    \r\n})\r\n\r\napp.register(LojaRoutes, {\r\n    prefix: '/loja',\r\n    \r\n})\r\n\r\napp.register(MedalhaRoutes, {\r\n    prefix: '/medalha',\r\n    \r\n})\r\n\r\napp.register(MedalhaDisponivelNaLojaRoutes, {\r\n    prefix: '/medalhadisponivelnaloja',\r\n    \r\n})\r\n\r\nconst port = process.env.PORT ? parseInt(process.env.PORT) : 3333;\r\n\r\napp.listen({ port: port }, (err, address) => {\r\n  if (err) {\r\n    console.error(err);\r\n    process.exit(1);\r\n  }\r\n  console.log(`Server is running on port ${port}`);\r\n});","import { PrismaClient } from \"@prisma/client\";\r\n\r\nexport const prisma = new PrismaClient()","import { prisma } from \"../database/prisma-client\";\r\nimport { User, UserCreate, UserRepository, UserUpdate } from \"../interfaces/users.interface\";\r\n\r\nexport class UserRepositoryPrisma implements UserRepository {\r\n    async create(data: UserCreate): Promise<User> {\r\n        const created = await prisma.user.create({\r\n            data: {\r\n                name: data.name,\r\n                email: data.email,\r\n                password: data.password,\r\n                totalpoints: data.totalpoints ?? 0,\r\n                paypoints: data.paypoints ?? 0,\r\n                doneQuiz: data.doneQuiz ?? [],\r\n            }\r\n        });\r\n\r\n        return this.mapToInterface(created);\r\n    }\r\n\r\n    async findByEmail(email: string): Promise<User | null> {\r\n        const user = await prisma.user.findUnique({ where: { email } });\r\n        return user ? this.mapToInterface(user) : null;\r\n    }\r\n\r\n    async get(id: string): Promise<User | null> {\r\n        const user = await prisma.user.findUnique({ where: { id } });\r\n        return user ? this.mapToInterface(user) : null;\r\n    }\r\n\r\n    async update(id: string, data: UserUpdate): Promise<User> {\r\n        const updated = await prisma.user.update({\r\n            where: { id },\r\n            data: {\r\n                name: data.name,\r\n                email: data.email,\r\n                password: data.password,\r\n                totalpoints: data.totalpoints,\r\n                paypoints: data.paypoints,\r\n                doneQuiz: data.doneQuiz,\r\n            }\r\n        });\r\n\r\n        return this.mapToInterface(updated);\r\n    }\r\n\r\n    async delete(id: string): Promise<void> {\r\n        await prisma.user.delete({ where: { id } });\r\n    }\r\n\r\n    private mapToInterface(prismaUser: any): User {\r\n        return {\r\n            id: prismaUser.id,\r\n            name: prismaUser.name,\r\n            email: prismaUser.email,\r\n            password: prismaUser.password,\r\n            totalpoints: prismaUser.totalpoints,\r\n            paypoints: prismaUser.paypoints,\r\n            doneQuiz: prismaUser.doneQuiz,\r\n            createdAt: prismaUser.createdAt.toISOString(),\r\n            updatedAt: prismaUser.updatedAt.toISOString(),\r\n        };\r\n    }\r\n}\r\n","import { User, UserCreate, UserRepository, UserUpdate } from \"../interfaces/users.interface\";\r\nimport { UserRepositoryPrisma } from \"../repositories/user.repository\";\r\n\r\nclass UserUseCase {\r\n    private userRepository: UserRepository;\r\n\r\n    constructor() {\r\n        this.userRepository = new UserRepositoryPrisma();\r\n    }\r\n\r\n    async create({ email, name, password, totalpoints = 0, paypoints = 0, doneQuiz = [] }: UserCreate): Promise<User> {\r\n        const exists = await this.userRepository.findByEmail(email);\r\n        if (exists) throw new Error(\"User already exists\");\r\n\r\n        return await this.userRepository.create({\r\n            email,\r\n            name,\r\n            password,\r\n            totalpoints,\r\n            paypoints,\r\n            doneQuiz,\r\n        });\r\n    }\r\n\r\n    async get(id: string): Promise<User | null> {\r\n        return await this.userRepository.get(id);\r\n    }\r\n\r\n    async getByEmail(email: string): Promise<User | null> {\r\n        return await this.userRepository.findByEmail(email);\r\n    }\r\n\r\n    async update(id: string, data: UserUpdate): Promise<User> {\r\n        const user = await this.userRepository.get(id);\r\n        if (!user) throw new Error(\"User not found\");\r\n\r\n        return await this.userRepository.update(id, data);\r\n    }\r\n\r\n    async delete(id: string): Promise<void> {\r\n        const user = await this.userRepository.get(id);\r\n        if (!user) throw new Error(\"User not found\");\r\n\r\n        await this.userRepository.delete(id);\r\n    }\r\n}\r\n\r\nexport { UserUseCase };\r\n","import { FastifyInstance } from \"fastify\";\r\nimport { UserUseCase } from \"../usecases/user.usecase\";\r\nimport { UserCreate } from \"../interfaces/users.interface\";\r\nimport bcrypt from \"bcrypt\";\r\nimport jwt from \"jsonwebtoken\";\r\n\r\nexport async function userRoutes(fastify: FastifyInstance) {\r\n    const userUseCase = new UserUseCase();\r\n\r\n    fastify.post<{ Body: UserCreate }>(\"/\", async (req, reply) => {\r\n        const { name, email, password, totalpoints, paypoints, doneQuiz } = req.body;\r\n        try {\r\n            const existingUser = await userUseCase.getByEmail(email);\r\n            if (existingUser) {\r\n                return reply.status(400).send({ error: \"User already exists\" });\r\n            }\r\n\r\n            const hashedPassword = await bcrypt.hash(password, 10);\r\n\r\n            const data = await userUseCase.create({\r\n                name,\r\n                email,\r\n                password: hashedPassword,\r\n                totalpoints,\r\n                paypoints,\r\n                doneQuiz,\r\n            });\r\n            return reply.status(201).send(data);\r\n        } catch (error) {\r\n            return reply.status(400).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n\r\n    fastify.post<{ Body: { email: string; password: string } }>(\"/login\", async (req, reply) => {\r\n        try {\r\n            const { email, password } = req.body;\r\n            const user = await userUseCase.getByEmail(email);\r\n            if (!user) {\r\n                return reply.status(401).send({ error: \"Invalid email or password\" });\r\n            }\r\n\r\n            const passwordMatch = await bcrypt.compare(password, user.password);\r\n            if (!passwordMatch) {\r\n                return reply.status(401).send({ error: \"Invalid email or password\" });\r\n            }\r\n\r\n            const token = jwt.sign(\r\n                { userId: user.id, email: user.email },\r\n                process.env.JWT_SECRET || \"supersecretkey\",\r\n                { expiresIn: \"1h\" }\r\n            );\r\n\r\n            return reply.send({ token });\r\n        } catch (error) {\r\n            return reply.status(500).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n\r\n    fastify.get<{ Params: { id: string } }>(\"/:id\", async (req, reply) => {\r\n        try {\r\n            const user = await userUseCase.get(req.params.id);\r\n            if (!user) {\r\n                return reply.status(404).send({ message: \"User not found\" });\r\n            }\r\n            return reply.send(user);\r\n        } catch (error) {\r\n            return reply.status(500).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n\r\n    fastify.put<{ Params: { id: string }; Body: Partial<UserCreate> }>(\"/:id\", async (req, reply) => {\r\n        try {\r\n            const updated = await userUseCase.update(req.params.id, req.body);\r\n            return reply.send(updated);\r\n        } catch (error) {\r\n            return reply.status(400).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n\r\n    fastify.delete<{ Params: { id: string } }>(\"/:id\", async (req, reply) => {\r\n        try {\r\n            await userUseCase.delete(req.params.id);\r\n            return reply.status(204).send();\r\n        } catch (error) {\r\n            return reply.status(400).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n}\r\n","import { prisma } from \"../database/prisma-client\";\r\nimport { Administrador, AdministradorCreate, AdministradorUpdate, AdministradorRepository} from \"../interfaces/administrador.interface\";\r\n\r\nexport class AdministradorRepositoryPrisma implements AdministradorRepository {\r\n    async create(data: AdministradorCreate): Promise<Administrador> {\r\n        const created = await prisma.administrador.create({\r\n            data: {\r\n                name: data.name,\r\n                email: data.email,\r\n                password: data.password,\r\n            }\r\n        });\r\n\r\n        return this.mapToInterface(created);\r\n    }\r\n\r\n    async findByEmail(email: string): Promise<Administrador | null> {\r\n        const administrador = await prisma.administrador.findUnique({ where: { email } });\r\n        return administrador ? this.mapToInterface(administrador) : null;\r\n    }\r\n\r\n    async get(id: string): Promise<Administrador | null> {\r\n        const administrador = await prisma.administrador.findUnique({ where: { id } });\r\n        return administrador ? this.mapToInterface(administrador) : null;\r\n    }\r\n\r\n    async update(id: string, data: AdministradorUpdate): Promise<Administrador> {\r\n        const updated = await prisma.administrador.update({\r\n            where: { id },\r\n            data: {\r\n                name: data.name,\r\n                email: data.email,\r\n                password: data.password,\r\n            }\r\n        });\r\n\r\n        return this.mapToInterface(updated);\r\n    }\r\n\r\n    async delete(id: string): Promise<void> {\r\n        await prisma.administrador.delete({ where: { id } });\r\n    }\r\n\r\n    private mapToInterface(prismaAdministrador: any): Administrador {\r\n        return {\r\n            id: prismaAdministrador.id,\r\n            name: prismaAdministrador.name,\r\n            email: prismaAdministrador.email,\r\n            password: prismaAdministrador.password,\r\n            createdAt: prismaAdministrador.createdAt.toISOString(),\r\n            updatedAt: prismaAdministrador.updatedAt.toISOString(),\r\n        };\r\n    }\r\n}\r\n","import { Administrador, AdministradorCreate, AdministradorUpdate, AdministradorRepository} from \"../interfaces/administrador.interface\";\r\nimport { AdministradorRepositoryPrisma } from \"../repositories/administrador.repository\";\r\n\r\nclass AdministradorUseCase {\r\n    private administradorRepository: AdministradorRepository;\r\n\r\n    constructor() {\r\n        this.administradorRepository = new AdministradorRepositoryPrisma();\r\n    }\r\n\r\n    async create({ email, name, password }: AdministradorCreate): Promise<Administrador> {\r\n        const exists = await this.administradorRepository.findByEmail(email);\r\n        if (exists) throw new Error(\"Administrador already exists\");\r\n\r\n        return await this.administradorRepository.create({\r\n            email,\r\n            name,\r\n            password\r\n        });\r\n    }\r\n\r\n    async get(id: string): Promise<Administrador | null> {\r\n        return await this.administradorRepository.get(id);\r\n    }\r\n\r\n    async getByEmail(email: string): Promise<Administrador | null> {\r\n        return await this.administradorRepository.findByEmail(email);\r\n    }\r\n\r\n    async update(id: string, data: AdministradorUpdate): Promise<Administrador> {\r\n        const administrador = await this.administradorRepository.get(id);\r\n        if (!administrador) throw new Error(\"Administrador not found\");\r\n\r\n        return await this.administradorRepository.update(id, data);\r\n    }\r\n\r\n    async delete(id: string): Promise<void> {\r\n        const administrador = await this.administradorRepository.get(id);\r\n        if (!administrador) throw new Error(\"Administrador not found\");\r\n\r\n        await this.administradorRepository.delete(id);\r\n    }\r\n}\r\n\r\nexport { AdministradorUseCase };","import { FastifyInstance } from \"fastify\";\r\nimport { AdministradorUseCase } from \"../usecases/administrador.usecase\";\r\nimport { AdministradorCreate } from \"../interfaces/administrador.interface\";\r\nimport bcrypt from \"bcrypt\";\r\nimport jwt from \"jsonwebtoken\";\r\n\r\nexport async function administradorRoutes(fastify: FastifyInstance) {\r\n    const administradorUseCase = new AdministradorUseCase();\r\n\r\n    fastify.post<{ Body: AdministradorCreate }>(\"/\", async (req, reply) => {\r\n        const { name, email, password} = req.body;\r\n        try {\r\n            const existingAdministrador = await administradorUseCase.getByEmail(email);\r\n            if (existingAdministrador) {\r\n                return reply.status(400).send({ error: \"Administrador already exists\" });\r\n            }\r\n\r\n            const hashedPassword = await bcrypt.hash(password, 10);\r\n\r\n            const data = await administradorUseCase.create({\r\n                name,\r\n                email,\r\n                password: hashedPassword,\r\n            });\r\n            return reply.status(201).send(data);\r\n        } catch (error) {\r\n            return reply.status(400).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n\r\n    fastify.post<{ Body: { email: string; password: string } }>(\"/login\", async (req, reply) => {\r\n        try {\r\n            const { email, password } = req.body;\r\n            const administrador = await administradorUseCase.getByEmail(email);\r\n            if (!administrador) {\r\n                return reply.status(401).send({ error: \"Invalid email or password\" });\r\n            }\r\n\r\n            const passwordMatch = await bcrypt.compare(password, administrador.password);\r\n            if (!passwordMatch) {\r\n                return reply.status(401).send({ error: \"Invalid email or password\" });\r\n            }\r\n\r\n            const token = jwt.sign(\r\n                { administradorId: administrador.id, email: administrador.email },\r\n                process.env.JWT_SECRET || \"supersecretkey\",\r\n                { expiresIn: \"1h\" }\r\n            );\r\n\r\n            return reply.send({ token });\r\n        } catch (error) {\r\n            return reply.status(500).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n\r\n    fastify.get<{ Params: { id: string } }>(\"/:id\", async (req, reply) => {\r\n        try {\r\n            const administrador = await administradorUseCase.get(req.params.id);\r\n            if (!administrador) {\r\n                return reply.status(404).send({ message: \"Administrador not found\" });\r\n            }\r\n            return reply.send(administrador);\r\n        } catch (error) {\r\n            return reply.status(500).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n\r\n    fastify.put<{ Params: { id: string }; Body: Partial<AdministradorCreate> }>(\"/:id\", async (req, reply) => {\r\n        try {\r\n            const updated = await administradorUseCase.update(req.params.id, req.body);\r\n            return reply.send(updated);\r\n        } catch (error) {\r\n            return reply.status(400).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n\r\n    fastify.delete<{ Params: { id: string } }>(\"/:id\", async (req, reply) => {\r\n        try {\r\n            await administradorUseCase.delete(req.params.id);\r\n            return reply.status(204).send();\r\n        } catch (error) {\r\n            return reply.status(400).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n}\r\n","import { FastifyInstance } from \"fastify\";\r\nimport { JogoUseCase } from \"../usecases/jogo.usecase\";\r\nimport { JogoCreate } from \"../interfaces/jogo.interface\";\r\n\r\nexport async function JogoRoutes(fastify: FastifyInstance) {\r\n    const JogoUseCase = new JogoUseCase();\r\n\r\n    fastify.post<{ Body: JogoCreate }>(\"/\", async (req, reply) => {\r\n        const { name, descricao, points} = req.body;\r\n        try {\r\n            const existingJogo = await JogoUseCase.getByName(name);\r\n            if (existingJogo) {\r\n                return reply.status(400).send({ error: \"Jogo already exists\" });\r\n            }\r\n\r\n        } catch (error) {\r\n            return reply.status(400).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n\r\n    fastify.post<{ Body: { name: string, descricao: string; points: number } }>(\"/cadastrar\", async (req, reply) => {\r\n        try {\r\n            const { name } = req.body;\r\n            const Jogo = await JogoUseCase.getByName(name);\r\n            if (!Jogo) {\r\n                return reply.status(401).send({ error: \"Invalid name\" });\r\n            }\r\n\r\n        } catch (error) {\r\n            return reply.status(500).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n\r\n    fastify.get<{ Params: { id: string } }>(\"/:id\", async (req, reply) => {\r\n        try {\r\n            const Jogo = await JogoUseCase.get(req.params.id);\r\n            if (!Jogo) {\r\n                return reply.status(404).send({ message: \"Jogo not found\" });\r\n            }\r\n            return reply.send(Jogo);\r\n        } catch (error) {\r\n            return reply.status(500).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n\r\n    fastify.put<{ Params: { id: string }; Body: Partial<JogoCreate> }>(\"/:id\", async (req, reply) => {\r\n        try {\r\n            const updated = await JogoUseCase.update(req.params.id, req.body);\r\n            return reply.send(updated);\r\n        } catch (error) {\r\n            return reply.status(400).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n\r\n    fastify.delete<{ Params: { id: string } }>(\"/:id\", async (req, reply) => {\r\n        try {\r\n            await JogoUseCase.delete(req.params.id);\r\n            return reply.status(204).send();\r\n        } catch (error) {\r\n            return reply.status(400).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n}\r\n","import { FastifyInstance } from \"fastify\";\r\nimport { ConteudoEducativoUseCase } from \"../usecases/conteudoeducativo.usecase\";\r\nimport { ConteudoEducativoCreate } from \"../interfaces/conteudoeducativo.interface\";\r\n\r\nexport async function ConteudoEducativoRoutes(fastify: FastifyInstance) {\r\n    const ConteudoEducativoUseCase = new ConteudoEducativoUseCase();\r\n\r\n    fastify.post<{ Body: ConteudoEducativoCreate }>(\"/\", async (req, reply) => {\r\n        const { name, titulo, texto} = req.body;\r\n        try {\r\n            const existingConteudoEducativo = await ConteudoEducativoUseCase.getByTitulo(titulo);\r\n            if (existingConteudoEducativo) {\r\n                return reply.status(400).send({ error: \"ConteudoEducativo already exists\" });\r\n            }\r\n\r\n        } catch (error) {\r\n            return reply.status(400).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n\r\n    fastify.post<{ Body: { titulo: string; texto: string } }>(\"/cadastrar\", async (req, reply) => {\r\n        try {\r\n            const { titulo} = req.body;\r\n            const ConteudoEducativo = await ConteudoEducativoUseCase.getByTitulo(titulo);\r\n            if (!ConteudoEducativo) {\r\n                return reply.status(401).send({ error: \"Invalid titulo or texto\" });\r\n            }\r\n\r\n        } catch (error) {\r\n            return reply.status(500).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n\r\n    fastify.get<{ Params: { id: string } }>(\"/:id\", async (req, reply) => {\r\n        try {\r\n            const ConteudoEducativo = await ConteudoEducativoUseCase.get(req.params.id);\r\n            if (!ConteudoEducativo) {\r\n                return reply.status(404).send({ message: \"ConteudoEducativo not found\" });\r\n            }\r\n            return reply.send(ConteudoEducativo);\r\n        } catch (error) {\r\n            return reply.status(500).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n\r\n    fastify.put<{ Params: { id: string }; Body: Partial<ConteudoEducativoCreate> }>(\"/:id\", async (req, reply) => {\r\n        try {\r\n            const updated = await ConteudoEducativoUseCase.update(req.params.id, req.body);\r\n            return reply.send(updated);\r\n        } catch (error) {\r\n            return reply.status(400).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n\r\n    fastify.delete<{ Params: { id: string } }>(\"/:id\", async (req, reply) => {\r\n        try {\r\n            await ConteudoEducativoUseCase.delete(req.params.id);\r\n            return reply.status(204).send();\r\n        } catch (error) {\r\n            return reply.status(400).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n}\r\n","import { FastifyInstance } from \"fastify\";\r\nimport { ConteudoImagemUseCase } from \"../usecases/conteudoimagem.usecase\";\r\nimport { ConteudoImagemCreate } from \"../interfaces/conteudoimagem.interface\";\r\n\r\nexport async function ConteudoImagemRoutes(fastify: FastifyInstance) {\r\n    const ConteudoImagemUseCase = new ConteudoImagemUseCase();\r\n\r\n    fastify.post<{ Body: ConteudoImagemCreate }>(\"/\", async (req, reply) => {\r\n        const { url} = req.body;\r\n        try {\r\n            const existingConteudoImagem = await ConteudoImagemUseCase.getByUrl(url);\r\n            if (existingConteudoImagem) {\r\n                return reply.status(400).send({ error: \"ConteudoImagem already exists\" });\r\n            }\r\n\r\n        } catch (error) {\r\n            return reply.status(400).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n\r\n    fastify.post<{ Body: { titulo: string; texto: string } }>(\"/cadastrar\", async (req, reply) => {\r\n        try {\r\n            const { titulo} = req.body;\r\n            const ConteudoImagem = await ConteudoImagemUseCase.getByTitulo(titulo);\r\n            if (!ConteudoImagem) {\r\n                return reply.status(401).send({ error: \"Invalid titulo or texto\" });\r\n            }\r\n\r\n        } catch (error) {\r\n            return reply.status(500).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n\r\n    fastify.get<{ Params: { id: string } }>(\"/:id\", async (req, reply) => {\r\n        try {\r\n            const ConteudoImagem = await ConteudoImagemUseCase.get(req.params.id);\r\n            if (!ConteudoImagem) {\r\n                return reply.status(404).send({ message: \"ConteudoImagem not found\" });\r\n            }\r\n            return reply.send(ConteudoImagem);\r\n        } catch (error) {\r\n            return reply.status(500).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n\r\n    fastify.put<{ Params: { id: string }; Body: Partial<ConteudoImagemCreate> }>(\"/:id\", async (req, reply) => {\r\n        try {\r\n            const updated = await ConteudoImagemUseCase.update(req.params.id, req.body);\r\n            return reply.send(updated);\r\n        } catch (error) {\r\n            return reply.status(400).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n\r\n    fastify.delete<{ Params: { id: string } }>(\"/:id\", async (req, reply) => {\r\n        try {\r\n            await ConteudoImagemUseCase.delete(req.params.id);\r\n            return reply.status(204).send();\r\n        } catch (error) {\r\n            return reply.status(400).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n}\r\n","import { FastifyInstance } from \"fastify\";\r\nimport { LojaUseCase } from \"../usecases/loja.usecase\";\r\nimport { LojaCreate } from \"../interfaces/loja.interface\";\r\n\r\nexport async function LojaRoutes(fastify: FastifyInstance) {\r\n    const LojaUseCase = new LojaUseCase();\r\n\r\n    fastify.post<{ Body: LojaCreate }>(\"/\", async (req, reply) => {\r\n        const { name } = req.body;\r\n        try {\r\n            const existingLoja = await LojaUseCase.getByName(name);\r\n            if (existingLoja) {\r\n                return reply.status(400).send({ error: \"Loja already exists\" });\r\n            }\r\n\r\n        } catch (error) {\r\n            return reply.status(400).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n\r\n    fastify.post<{ Body: { name: string, descricao: string; points: number } }>(\"/cadastrar\", async (req, reply) => {\r\n        try {\r\n            const { name } = req.body;\r\n            const Loja = await LojaUseCase.getByName(name);\r\n            if (!Loja) {\r\n                return reply.status(401).send({ error: \"Invalid name\" });\r\n            }\r\n\r\n        } catch (error) {\r\n            return reply.status(500).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n\r\n    fastify.get<{ Params: { id: string } }>(\"/:id\", async (req, reply) => {\r\n        try {\r\n            const Loja = await LojaUseCase.get(req.params.id);\r\n            if (!Loja) {\r\n                return reply.status(404).send({ message: \"Loja not found\" });\r\n            }\r\n            return reply.send(Loja);\r\n        } catch (error) {\r\n            return reply.status(500).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n\r\n    fastify.put<{ Params: { id: string }; Body: Partial<LojaCreate> }>(\"/:id\", async (req, reply) => {\r\n        try {\r\n            const updated = await LojaUseCase.update(req.params.id, req.body);\r\n            return reply.send(updated);\r\n        } catch (error) {\r\n            return reply.status(400).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n\r\n    fastify.delete<{ Params: { id: string } }>(\"/:id\", async (req, reply) => {\r\n        try {\r\n            await LojaUseCase.delete(req.params.id);\r\n            return reply.status(204).send();\r\n        } catch (error) {\r\n            return reply.status(400).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n}\r\n","import { FastifyInstance } from \"fastify\";\r\nimport { MedalhaUseCase } from \"../usecases/medalha.usecase\";\r\nimport { MedalhaCreate } from \"../interfaces/medalha.interface\";\r\n\r\nexport async function MedalhaRoutes(fastify: FastifyInstance) {\r\n    const MedalhaUseCase = new MedalhaUseCase();\r\n\r\n    fastify.post<{ Body: MedalhaCreate }>(\"/\", async (req, reply) => {\r\n        const { name, descricao, icon} = req.body;\r\n        try {\r\n            const existingMedalha = await MedalhaUseCase.getByDescricao(descricao);\r\n            if (existingMedalha) {\r\n                return reply.status(400).send({ error: \"Medalha already exists\" });\r\n            }\r\n\r\n        } catch (error) {\r\n            return reply.status(400).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n\r\n    fastify.post<{ Body: { descricao: string; icon: string } }>(\"/cadastrar\", async (req, reply) => {\r\n        try {\r\n            const { descricao} = req.body;\r\n            const Medalha = await MedalhaUseCase.getByDescricao(descricao);\r\n            if (!Medalha) {\r\n                return reply.status(401).send({ error: \"Invalid descricao or icon\" });\r\n            }\r\n\r\n        } catch (error) {\r\n            return reply.status(500).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n\r\n    fastify.get<{ Params: { id: string } }>(\"/:id\", async (req, reply) => {\r\n        try {\r\n            const Medalha = await MedalhaUseCase.get(req.params.id);\r\n            if (!Medalha) {\r\n                return reply.status(404).send({ message: \"Medalha not found\" });\r\n            }\r\n            return reply.send(Medalha);\r\n        } catch (error) {\r\n            return reply.status(500).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n\r\n    fastify.put<{ Params: { id: string }; Body: Partial<MedalhaCreate> }>(\"/:id\", async (req, reply) => {\r\n        try {\r\n            const updated = await MedalhaUseCase.update(req.params.id, req.body);\r\n            return reply.send(updated);\r\n        } catch (error) {\r\n            return reply.status(400).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n\r\n    fastify.delete<{ Params: { id: string } }>(\"/:id\", async (req, reply) => {\r\n        try {\r\n            await MedalhaUseCase.delete(req.params.id);\r\n            return reply.status(204).send();\r\n        } catch (error) {\r\n            return reply.status(400).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n}\r\n","import { FastifyInstance } from \"fastify\";\r\nimport { MedalhaDisponivelNaLojaUseCase } from \"../usecases/medalhadisponivelnaloja.usecase\";\r\nimport { MedalhaDisponivelNaLojaCreate } from \"../interfaces/medalhadisponivelnaloja.interface\";\r\n\r\nexport async function MedalhaDisponivelNaLojaRoutes(fastify: FastifyInstance) {\r\n    const MedalhaDisponivelNaLojaUseCase = new MedalhaDisponivelNaLojaUseCase();\r\n\r\n    fastify.post<{ Body: MedalhaDisponivelNaLojaCreate }>(\"/\", async (req, reply) => {\r\n        const { preco } = req.body;\r\n        try {\r\n            const existingMedalhaDisponivelNaLoja = await MedalhaDisponivelNaLojaUseCase.getByPreco(preco);\r\n            if (existingMedalhaDisponivelNaLoja) {\r\n                return reply.status(400).send({ error: \"MedalhaDisponivelNaLoja already exists\" });\r\n            }\r\n\r\n        } catch (error) {\r\n            return reply.status(400).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n\r\n    fastify.post<{ Body: { preco: string, descricao: string; points: number } }>(\"/cadastrar\", async (req, reply) => {\r\n        try {\r\n            const { preco } = req.body;\r\n            const MedalhaDisponivelNaLoja = await MedalhaDisponivelNaLojaUseCase.getByPreco(preco);\r\n            if (!MedalhaDisponivelNaLoja) {\r\n                return reply.status(401).send({ error: \"Invalid preco\" });\r\n            }\r\n\r\n        } catch (error) {\r\n            return reply.status(500).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n\r\n    fastify.get<{ Params: { id: string } }>(\"/:id\", async (req, reply) => {\r\n        try {\r\n            const MedalhaDisponivelNaLoja = await MedalhaDisponivelNaLojaUseCase.get(req.params.id);\r\n            if (!MedalhaDisponivelNaLoja) {\r\n                return reply.status(404).send({ message: \"MedalhaDisponivelNaLoja not found\" });\r\n            }\r\n            return reply.send(MedalhaDisponivelNaLoja);\r\n        } catch (error) {\r\n            return reply.status(500).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n\r\n    fastify.put<{ Params: { id: string }; Body: Partial<MedalhaDisponivelNaLojaCreate> }>(\"/:id\", async (req, reply) => {\r\n        try {\r\n            const updated = await MedalhaDisponivelNaLojaUseCase.update(req.params.id, req.body);\r\n            return reply.send(updated);\r\n        } catch (error) {\r\n            return reply.status(400).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n\r\n    fastify.delete<{ Params: { id: string } }>(\"/:id\", async (req, reply) => {\r\n        try {\r\n            await MedalhaDisponivelNaLojaUseCase.delete(req.params.id);\r\n            return reply.status(204).send();\r\n        } catch (error) {\r\n            return reply.status(400).send({ error: error instanceof Error ? error.message : error });\r\n        }\r\n    });\r\n}\r\n"],"mappings":"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","names":["fastify","bcrypt","jwt","fastify","fastify","fastify","fastify","fastify","fastify","fastify"]}